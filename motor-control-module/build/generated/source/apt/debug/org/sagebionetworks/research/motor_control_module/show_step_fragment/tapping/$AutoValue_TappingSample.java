

package org.sagebionetworks.research.motor_control_module.show_step_fragment.tapping;

import android.support.annotation.NonNull;
import java.util.Arrays;

// Generated by com.google.auto.value.processor.AutoValueProcessor
abstract class $AutoValue_TappingSample extends TappingSample {

  private final String buttonIdentifier;

  private final double duration;

  private final float[] location;

  private final String stepPath;

  private final double timestamp;

  private final double uptime;

  $AutoValue_TappingSample(
      String buttonIdentifier,
      double duration,
      float[] location,
      String stepPath,
      double timestamp,
      double uptime) {
    if (buttonIdentifier == null) {
      throw new NullPointerException("Null buttonIdentifier");
    }
    this.buttonIdentifier = buttonIdentifier;
    this.duration = duration;
    if (location == null) {
      throw new NullPointerException("Null location");
    }
    this.location = location;
    if (stepPath == null) {
      throw new NullPointerException("Null stepPath");
    }
    this.stepPath = stepPath;
    this.timestamp = timestamp;
    this.uptime = uptime;
  }

  @TappingButtonIdentifier
  @NonNull
  @Override
  public String getButtonIdentifier() {
    return buttonIdentifier;
  }

  @Override
  public double getDuration() {
    return duration;
  }

  @NonNull
  @Override
  public float[] getLocation() {
    return location;
  }

  @NonNull
  @Override
  public String getStepPath() {
    return stepPath;
  }

  @Override
  public double getTimestamp() {
    return timestamp;
  }

  @Override
  public double getUptime() {
    return uptime;
  }

  @Override
  public String toString() {
    return "TappingSample{"
         + "buttonIdentifier=" + buttonIdentifier + ", "
         + "duration=" + duration + ", "
         + "location=" + Arrays.toString(location) + ", "
         + "stepPath=" + stepPath + ", "
         + "timestamp=" + timestamp + ", "
         + "uptime=" + uptime
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof TappingSample) {
      TappingSample that = (TappingSample) o;
      return this.buttonIdentifier.equals(that.getButtonIdentifier())
          && Double.doubleToLongBits(this.duration) == Double.doubleToLongBits(that.getDuration())
          && Arrays.equals(this.location, (that instanceof $AutoValue_TappingSample) ? (($AutoValue_TappingSample) that).location : that.getLocation())
          && this.stepPath.equals(that.getStepPath())
          && Double.doubleToLongBits(this.timestamp) == Double.doubleToLongBits(that.getTimestamp())
          && Double.doubleToLongBits(this.uptime) == Double.doubleToLongBits(that.getUptime());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h$ = 1;
    h$ *= 1000003;
    h$ ^= buttonIdentifier.hashCode();
    h$ *= 1000003;
    h$ ^= (int) ((Double.doubleToLongBits(duration) >>> 32) ^ Double.doubleToLongBits(duration));
    h$ *= 1000003;
    h$ ^= Arrays.hashCode(location);
    h$ *= 1000003;
    h$ ^= stepPath.hashCode();
    h$ *= 1000003;
    h$ ^= (int) ((Double.doubleToLongBits(timestamp) >>> 32) ^ Double.doubleToLongBits(timestamp));
    h$ *= 1000003;
    h$ ^= (int) ((Double.doubleToLongBits(uptime) >>> 32) ^ Double.doubleToLongBits(uptime));
    return h$;
  }

  @Override
  public TappingSample.Builder toBuilder() {
    return new Builder(this);
  }

  static final class Builder extends TappingSample.Builder {
    private String buttonIdentifier;
    private Double duration;
    private float[] location;
    private String stepPath;
    private Double timestamp;
    private Double uptime;
    Builder() {
    }
    private Builder(TappingSample source) {
      this.buttonIdentifier = source.getButtonIdentifier();
      this.duration = source.getDuration();
      this.location = source.getLocation();
      this.stepPath = source.getStepPath();
      this.timestamp = source.getTimestamp();
      this.uptime = source.getUptime();
    }
    @Override
    public TappingSample.Builder setButtonIdentifier(String buttonIdentifier) {
      if (buttonIdentifier == null) {
        throw new NullPointerException("Null buttonIdentifier");
      }
      this.buttonIdentifier = buttonIdentifier;
      return this;
    }
    @Override
    public TappingSample.Builder setDuration(double duration) {
      this.duration = duration;
      return this;
    }
    @Override
    public TappingSample.Builder setLocation(float[] location) {
      if (location == null) {
        throw new NullPointerException("Null location");
      }
      this.location = location;
      return this;
    }
    @Override
    public TappingSample.Builder setStepPath(String stepPath) {
      if (stepPath == null) {
        throw new NullPointerException("Null stepPath");
      }
      this.stepPath = stepPath;
      return this;
    }
    @Override
    public TappingSample.Builder setTimestamp(double timestamp) {
      this.timestamp = timestamp;
      return this;
    }
    @Override
    public TappingSample.Builder setUptime(double uptime) {
      this.uptime = uptime;
      return this;
    }
    @Override
    public TappingSample build() {
      String missing = "";
      if (this.buttonIdentifier == null) {
        missing += " buttonIdentifier";
      }
      if (this.duration == null) {
        missing += " duration";
      }
      if (this.location == null) {
        missing += " location";
      }
      if (this.stepPath == null) {
        missing += " stepPath";
      }
      if (this.timestamp == null) {
        missing += " timestamp";
      }
      if (this.uptime == null) {
        missing += " uptime";
      }
      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new AutoValue_TappingSample(
          this.buttonIdentifier,
          this.duration,
          this.location,
          this.stepPath,
          this.timestamp,
          this.uptime);
    }
  }

}
