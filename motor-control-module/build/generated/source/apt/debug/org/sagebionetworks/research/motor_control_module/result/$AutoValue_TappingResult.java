

package org.sagebionetworks.research.motor_control_module.result;

import android.support.annotation.NonNull;
import android.support.annotation.Size;
import com.google.common.collect.ImmutableList;
import com.google.gson.annotations.SerializedName;
import java.util.Arrays;
import org.sagebionetworks.research.motor_control_module.show_step_fragment.tapping.TappingSample;
import org.threeten.bp.Instant;
import org.threeten.bp.ZonedDateTime;

// Generated by com.google.auto.value.processor.AutoValueProcessor
abstract class $AutoValue_TappingResult extends TappingResult {

  private final String identifier;

  private final Instant startTime;

  private final int[] buttonBoundLeft;

  private final int[] buttonBoundRight;

  private final Instant endTime;

  private final int hitButtonCount;

  private final ImmutableList<TappingSample> samples;

  private final int[] stepViewSize;

  private final ZonedDateTime zonedEndTime;

  private final ZonedDateTime zonedStartTime;

  $AutoValue_TappingResult(
      String identifier,
      Instant startTime,
      int[] buttonBoundLeft,
      int[] buttonBoundRight,
      Instant endTime,
      int hitButtonCount,
      ImmutableList<TappingSample> samples,
      int[] stepViewSize,
      ZonedDateTime zonedEndTime,
      ZonedDateTime zonedStartTime) {
    if (identifier == null) {
      throw new NullPointerException("Null identifier");
    }
    this.identifier = identifier;
    if (startTime == null) {
      throw new NullPointerException("Null startTime");
    }
    this.startTime = startTime;
    if (buttonBoundLeft == null) {
      throw new NullPointerException("Null buttonBoundLeft");
    }
    this.buttonBoundLeft = buttonBoundLeft;
    if (buttonBoundRight == null) {
      throw new NullPointerException("Null buttonBoundRight");
    }
    this.buttonBoundRight = buttonBoundRight;
    if (endTime == null) {
      throw new NullPointerException("Null endTime");
    }
    this.endTime = endTime;
    this.hitButtonCount = hitButtonCount;
    if (samples == null) {
      throw new NullPointerException("Null samples");
    }
    this.samples = samples;
    if (stepViewSize == null) {
      throw new NullPointerException("Null stepViewSize");
    }
    this.stepViewSize = stepViewSize;
    if (zonedEndTime == null) {
      throw new NullPointerException("Null zonedEndTime");
    }
    this.zonedEndTime = zonedEndTime;
    if (zonedStartTime == null) {
      throw new NullPointerException("Null zonedStartTime");
    }
    this.zonedStartTime = zonedStartTime;
  }

  @NonNull
  @Override
  public String getIdentifier() {
    return identifier;
  }

  @NonNull
  @Override
  public Instant getStartTime() {
    return startTime;
  }

  @NonNull
  @Size(value = 4L)
  @Override
  public int[] getButtonBoundLeft() {
    return buttonBoundLeft;
  }

  @NonNull
  @Size(value = 4L)
  @Override
  public int[] getButtonBoundRight() {
    return buttonBoundRight;
  }

  @NonNull
  @Override
  public Instant getEndTime() {
    return endTime;
  }

  @SerializedName(value = "tapCount")
  @Override
  public int getHitButtonCount() {
    return hitButtonCount;
  }

  @NonNull
  @Override
  public ImmutableList<TappingSample> getSamples() {
    return samples;
  }

  @NonNull
  @Size(value = 2L)
  @Override
  public int[] getStepViewSize() {
    return stepViewSize;
  }

  @NonNull
  @Override
  public ZonedDateTime getZonedEndTime() {
    return zonedEndTime;
  }

  @NonNull
  @Override
  public ZonedDateTime getZonedStartTime() {
    return zonedStartTime;
  }

  @Override
  public String toString() {
    return "TappingResult{"
         + "identifier=" + identifier + ", "
         + "startTime=" + startTime + ", "
         + "buttonBoundLeft=" + Arrays.toString(buttonBoundLeft) + ", "
         + "buttonBoundRight=" + Arrays.toString(buttonBoundRight) + ", "
         + "endTime=" + endTime + ", "
         + "hitButtonCount=" + hitButtonCount + ", "
         + "samples=" + samples + ", "
         + "stepViewSize=" + Arrays.toString(stepViewSize) + ", "
         + "zonedEndTime=" + zonedEndTime + ", "
         + "zonedStartTime=" + zonedStartTime
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof TappingResult) {
      TappingResult that = (TappingResult) o;
      return this.identifier.equals(that.getIdentifier())
          && this.startTime.equals(that.getStartTime())
          && Arrays.equals(this.buttonBoundLeft, (that instanceof $AutoValue_TappingResult) ? (($AutoValue_TappingResult) that).buttonBoundLeft : that.getButtonBoundLeft())
          && Arrays.equals(this.buttonBoundRight, (that instanceof $AutoValue_TappingResult) ? (($AutoValue_TappingResult) that).buttonBoundRight : that.getButtonBoundRight())
          && this.endTime.equals(that.getEndTime())
          && this.hitButtonCount == that.getHitButtonCount()
          && this.samples.equals(that.getSamples())
          && Arrays.equals(this.stepViewSize, (that instanceof $AutoValue_TappingResult) ? (($AutoValue_TappingResult) that).stepViewSize : that.getStepViewSize())
          && this.zonedEndTime.equals(that.getZonedEndTime())
          && this.zonedStartTime.equals(that.getZonedStartTime());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h$ = 1;
    h$ *= 1000003;
    h$ ^= identifier.hashCode();
    h$ *= 1000003;
    h$ ^= startTime.hashCode();
    h$ *= 1000003;
    h$ ^= Arrays.hashCode(buttonBoundLeft);
    h$ *= 1000003;
    h$ ^= Arrays.hashCode(buttonBoundRight);
    h$ *= 1000003;
    h$ ^= endTime.hashCode();
    h$ *= 1000003;
    h$ ^= hitButtonCount;
    h$ *= 1000003;
    h$ ^= samples.hashCode();
    h$ *= 1000003;
    h$ ^= Arrays.hashCode(stepViewSize);
    h$ *= 1000003;
    h$ ^= zonedEndTime.hashCode();
    h$ *= 1000003;
    h$ ^= zonedStartTime.hashCode();
    return h$;
  }

  @Override
  public TappingResult.Builder toBuilder() {
    return new Builder(this);
  }

  static final class Builder extends TappingResult.Builder {
    private String identifier;
    private Instant startTime;
    private int[] buttonBoundLeft;
    private int[] buttonBoundRight;
    private Instant endTime;
    private Integer hitButtonCount;
    private ImmutableList.Builder<TappingSample> samplesBuilder$;
    private ImmutableList<TappingSample> samples;
    private int[] stepViewSize;
    private ZonedDateTime zonedEndTime;
    private ZonedDateTime zonedStartTime;
    Builder() {
    }
    private Builder(TappingResult source) {
      this.identifier = source.getIdentifier();
      this.startTime = source.getStartTime();
      this.buttonBoundLeft = source.getButtonBoundLeft();
      this.buttonBoundRight = source.getButtonBoundRight();
      this.endTime = source.getEndTime();
      this.hitButtonCount = source.getHitButtonCount();
      this.samples = source.getSamples();
      this.stepViewSize = source.getStepViewSize();
      this.zonedEndTime = source.getZonedEndTime();
      this.zonedStartTime = source.getZonedStartTime();
    }
    @Override
    public TappingResult.Builder setIdentifier(String identifier) {
      if (identifier == null) {
        throw new NullPointerException("Null identifier");
      }
      this.identifier = identifier;
      return this;
    }
    @Override
    public TappingResult.Builder setStartTime(Instant startTime) {
      if (startTime == null) {
        throw new NullPointerException("Null startTime");
      }
      this.startTime = startTime;
      return this;
    }
    @Override
    public TappingResult.Builder setButtonBoundLeft(int[] buttonBoundLeft) {
      if (buttonBoundLeft == null) {
        throw new NullPointerException("Null buttonBoundLeft");
      }
      this.buttonBoundLeft = buttonBoundLeft;
      return this;
    }
    @Override
    public TappingResult.Builder setButtonBoundRight(int[] buttonBoundRight) {
      if (buttonBoundRight == null) {
        throw new NullPointerException("Null buttonBoundRight");
      }
      this.buttonBoundRight = buttonBoundRight;
      return this;
    }
    @Override
    public TappingResult.Builder setEndTime(Instant endTime) {
      if (endTime == null) {
        throw new NullPointerException("Null endTime");
      }
      this.endTime = endTime;
      return this;
    }
    @Override
    public TappingResult.Builder setHitButtonCount(int hitButtonCount) {
      this.hitButtonCount = hitButtonCount;
      return this;
    }
    @Override
    public ImmutableList.Builder<TappingSample> samplesBuilder() {
      if (samplesBuilder$ == null) {
        if (samples == null) {
          samplesBuilder$ = ImmutableList.builder();
        } else {
          samplesBuilder$ = ImmutableList.builder();
          samplesBuilder$.addAll(samples);
          samples = null;
        }
      }
      return samplesBuilder$;
    }
    @Override
    public TappingResult.Builder setStepViewSize(int[] stepViewSize) {
      if (stepViewSize == null) {
        throw new NullPointerException("Null stepViewSize");
      }
      this.stepViewSize = stepViewSize;
      return this;
    }
    @Override
    public TappingResult.Builder setZonedEndTime(ZonedDateTime zonedEndTime) {
      if (zonedEndTime == null) {
        throw new NullPointerException("Null zonedEndTime");
      }
      this.zonedEndTime = zonedEndTime;
      return this;
    }
    @Override
    public TappingResult.Builder setZonedStartTime(ZonedDateTime zonedStartTime) {
      if (zonedStartTime == null) {
        throw new NullPointerException("Null zonedStartTime");
      }
      this.zonedStartTime = zonedStartTime;
      return this;
    }
    @Override
    public TappingResult build() {
      if (samplesBuilder$ != null) {
        this.samples = samplesBuilder$.build();
      } else if (this.samples == null) {
        this.samples = ImmutableList.of();
      }
      String missing = "";
      if (this.identifier == null) {
        missing += " identifier";
      }
      if (this.startTime == null) {
        missing += " startTime";
      }
      if (this.buttonBoundLeft == null) {
        missing += " buttonBoundLeft";
      }
      if (this.buttonBoundRight == null) {
        missing += " buttonBoundRight";
      }
      if (this.endTime == null) {
        missing += " endTime";
      }
      if (this.hitButtonCount == null) {
        missing += " hitButtonCount";
      }
      if (this.stepViewSize == null) {
        missing += " stepViewSize";
      }
      if (this.zonedEndTime == null) {
        missing += " zonedEndTime";
      }
      if (this.zonedStartTime == null) {
        missing += " zonedStartTime";
      }
      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new AutoValue_TappingResult(
          this.identifier,
          this.startTime,
          this.buttonBoundLeft,
          this.buttonBoundRight,
          this.endTime,
          this.hitButtonCount,
          this.samples,
          this.stepViewSize,
          this.zonedEndTime,
          this.zonedStartTime);
    }
  }

}
